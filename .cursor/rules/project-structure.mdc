---
description: Project structure and file organization guidelines
globs: 
alwaysApply: false
---
# Project Structure

## Main Structure

- We use Bun, Vite and file-based Tanstack Router
- Use kebab-case for naming files and directories
- Most of the code lives in the src folder and looks something like this:

```tree
src
├── routes      # application routes
├── components  # shared components used across the entire application
├── config      # global configurations, exported env variables etc.
├── assets      # assets folder can contain all the static files such as images, fonts, etc.
├── features    # feature based modules
├── hooks       # shared hooks used across the entire application
├── lib         # reusable libraries preconfigured for the application
├── stores      # global state stores
├── testing     # test utilities and mocks
├── types       # shared types used across the application
└── main.tsx    # main application component
```

## Feature-based design
For easy scalability and maintenance, organize most of the code within the features folder. Each feature folder should contain code specific to that feature, keeping things neatly separated. This approach helps prevent mixing feature-related code with shared components, making it simpler to manage and maintain the codebase compared to having many files in a flat folder structure. By adopting this method, you can enhance collaboration, readability, and scalability in the application's architecture.

A feature could have the following structure:

```tree
src/features/awesome-feature
├── api         # exported API request declarations and api hooks related to a specific feature
├── assets      # assets folder can contain all the static files for a specific feature
├── components  # components scoped to a specific feature
├── hooks       # hooks scoped to a specific feature
├── stores      # state stores for a specific feature
├── types       # typescript types used within the feature
└── utils       # utility functions for a specific feature
```

NOTE: You don't need all of these folders for every feature. Only include the ones that are necessary for the feature.

In some cases it might be more practical to keep all API calls outside of the features folders in a dedicated api folder where all API calls are defined. This can be useful if you have a lot of shared API calls between features.

## Unidirectional codebase architecture

It might not be a good idea to import across the features. Instead, compose different features at the application level. The code should flow in one direction, from shared parts of the code to the application (shared -> features -> app). This is a good practice to follow as it makes the codebase more predictable and easier to understand.